replicaCount: 1

image:
  repository: nginx
  pullPolicy: IfNotPresent
  tag: 1.21

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  create: true
  annotations: {}
  name: ""

podAnnotations: {}

podSecurityContext: {}

securityContext: {}

deployment:
  containerPort: {}
  volumes:
    enabled: false
  extraVolumeMounts: []
extraVolumes: []
service:
  enabled: true
  name: http
  type: ClusterIP
  port: 80
  protocol: TCP

ingress:
  enabled: false
  annotations: {}
  hosts:
    - host: host.name.com
      paths:
      - path: /*
        backend:
          serviceName: ssl-redirect
          servicePort: use-annotation
      - backend:
          serviceName: uc-application
          servicePort: 80
        path: /*
  tls: []

resources: {}
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80
nginx:
  enabled: false
  image:
    repository: nginx
    pullPolicy: IfNotPresent
    tag: "1.19"

  resources: {}
  extraVolumeMounts: []
  healthcheck:
    enabled: false
    period: 5
    path: /health
  config: |
    daemon            off;
    worker_processes  2;
    user              www-data;
    events {
        use           epoll;
        worker_connections  128;
    }
    error_log         logs/error.log info;
    http {
        server_tokens off;
        include       mime.types;
        charset       utf-8;
        access_log    logs/access.log  combined;
        server {
            server_name   localhost;
            listen        127.0.0.1:80;

            error_page    500 502 503 504  /50x.html;

            location      / {
                root      html;
            }

        }

    }


  exporter:
    enabled: false

    image:
      repository: nginx/nginx-prometheus-exporter
      pullPolicy: IfNotPresent
      tag: "0.9.0"

    resources: {}

nodeSelector: {}

tolerations: []

affinity: {}

config: {}

containerPort: 80

livenessProbe: {}

readinessProbe: {}
envSecretName: {}

externalsecrets: {}

secretenv:
  enabled: false
  env: |
    APP_ENV=dev

env: dev
product: application

extraDeploy:
  enabled: false
  yaml: |
    apiVersion: v1
    kind: Pod
    metadata:
      name: nginx
    spec:
      containers:
      - name: nginx
        image: nginx:1.14.2
        ports:
        - containerPort: 80

migration:
  enabled: false
  ## In case you want to use a custom image for migration, set this value
  ## image:
  ##   registry:
  ##   repository:
  ##   tag:
  ##   digest: ""
  ##
  nodeSelector: {}
  config:
    command: []
    #  - "/bin/sh"
    args: []
    #  - "-c"
    #  - "echo 'Environment $(hello_env)! Secret $(username).'"

    # -- Map of environment variables to use within the job
    env: {}
    #  hello_env: "world"

    # -- Map of secrets that will be exposed as environment variables within the job
    secrets: {}
    #  username: "password"

    # -- List of config maps to mount to the deployment
    configMaps: []
    #  - name: "volume-1"
    #    mountPath: "/etc/config" # Must be unique
    #    mountPropagation: None # If unset will default to 'None'
    #    files: []
    #      - key: "file.cfg" # Key must be unique for each file
    #        contentsB64: "" # The file contents which have already been base-64 encoded
    #        contentsFile: "" # The path to a local file (note: contentsB64 will take precedence if not-empty)

  ## @param migration.args Override default container args (useful when using custom images)
  ##
  image:
    repository: "busybox"
    tag: "latest"
    # -- Whether the repository is public
    isRepositoryPublic: true
    # -- The image pullPolicy to use
    pullPolicy: "IfNotPresent"
  extraVolumeMounts: []
  extraVolumes: []
  ## Container resource requests and limits
  ## ref: https://kubernetes.io/docs/user-guide/compute-resources/
  ## @param migration.resources.limits The resources limits for the container
  ## @param migration.resources.requests The requested resources for the container
  ##
  resources:
    limits: {}
    requests: {}
  ## @param migration.hostAliases Add deployment host aliases
  ## https://kubernetes.io/docs/concepts/services-networking/add-entries-to-pod-etc-hosts-with-host-aliases/
  ##
  annotations:
    helm.sh/hook: post-install, pre-upgrade, pre-rollback
    helm.sh/hook-delete-policy: before-hook-creation, hook-succeeded
  ## @param migration.podLabels Additional pod labels
  ## Ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
  ##
  restartPolicy: "OnFailure"
  podLabels: {}
  ## @param migration.podAnnotations Additional pod annotations
  ## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
  ##
  podAnnotations: {}


cronjob:
  enabled: false
  schedule: "* * * * *"
  concurrencyPolicy: "Forbid"
  restartPolicy: "Never"
  failedJobsHistoryLimit: 10
  successfulJobsHistoryLimit: 1
  nodeSelector: {}
  image:
    repository: "busybox"
    tag: "latest"
    # -- Whether the repository is public
    isRepositoryPublic: true
    # -- The image pullPolicy to use
    pullPolicy: "IfNotPresent"

  config:
    command: []
    #  - "/bin/sh"
    args: []
    #  - "-c"
    #  - "echo 'Environment $(hello_env)! Secret $(username).'"

    # -- Map of environment variables to use within the job
    env: {}
    #  hello_env: "world"

    # -- Map of secrets that will be exposed as environment variables within the job
    secrets: {}
    #  username: "password"

  # -- List of config maps to mount to the deployment
  configMaps: []
  #  - name: "volume-1"
  #    mountPath: "/etc/config" # Must be unique
  #    mountPropagation: None # If unset will default to 'None'
  #    files: []
  #      - key: "file.cfg" # Key must be unique for each file
  #        contentsB64: "" # The file contents which have already been base-64 encoded
  #        contentsFile: "" # The path to a local file (note: contentsB64 will take precedence if not-empty)

  dockerconfigjson:
    # -- Name of the secret to use for the private repository
    name: "snowplow-cron-job-dockerhub"
    # -- Username for the private repository
    username: ""
    # -- Password for the private repository
    password: ""
    # -- Repository server URL
    server: "https://index.docker.io/v1/"
    # -- Email address for user of the private repository
    email: ""

  cloudserviceaccount:
    # -- Whether to create a service-account
    deploy: false
    # -- Name of the service-account to create
    name: "snowplow-cron-job-service-account"
    aws:
      # -- IAM Role ARN to bind to the k8s service account
      roleARN: ""
    gcp:
      # -- Service Account email to bind to the k8s service account
      serviceAccount: ""
