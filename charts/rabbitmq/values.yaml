global:
  imageRegistry: ""
  imagePullSecrets: []
  storageClass: ""
image:
  registry: eu.gcr.io
  repository: uc-next/rabbitmq
  tag: v3.10
  debug: false
  pullPolicy: IfNotPresent
  pullSecrets: []

nameOverride: ""
fullnameOverride: ""
namespaceOverride: ""
kubeVersion: ""
clusterDomain: cluster.local
extraDeploy: []
commonAnnotations: {}
commonLabels: {}
diagnosticMode:
  enabled: false
  command:
    - sleep
  args:
    - infinity
hostAliases: []
dnsPolicy: ""
dnsConfig: {}
auth:
  username: user
  password: ""
  existingPasswordSecret: ""
  erlangCookie: ""
  existingErlangSecret: ""
  tls:
    enabled: false
    autoGenerated: false
    failIfNoPeerCert: true
    sslOptionsVerify: verify_peer
    caCertificate: |-
    serverCertificate: |-
    serverKey: |-
    existingSecret: ""
    existingSecretFullChain: false

logs: "-"
ulimitNofiles: "65536"
maxAvailableSchedulers: ""
onlineSchedulers: ""

memoryHighWatermark:
  enabled: false
  type: "relative"
  value: 0.4

plugins: "rabbitmq_management rabbitmq_peer_discovery_k8s"
communityPlugins: ""
extraPlugins: "rabbitmq_auth_backend_ldap"
clustering:
  enabled: true
  addressType: hostname
  rebalance: false
  forceBoot: false
  partitionHandling: autoheal
loadDefinition:
  enabled: false
  file: "/app/load_definition.json"
  existingSecret: ""
command: []
args: []
lifecycleHooks: {}
terminationGracePeriodSeconds: 120
extraEnvVars: []
extraEnvVarsCM: ""
extraEnvVarsSecret: ""
containerPorts:
  amqp: 5672
  amqpTls: 5671
  dist: 25672
  manager: 15672
  epmd: 4369
  metrics: 9419
extraContainerPorts: []
configuration: |-
  default_user = {{ .Values.auth.username }}
  default_pass = CHANGEME
  {{- if .Values.clustering.enabled }}
  ## Clustering
  ##
  cluster_formation.peer_discovery_backend  = rabbit_peer_discovery_k8s
  cluster_formation.k8s.host = kubernetes.default
  cluster_formation.node_cleanup.interval = 10
  cluster_formation.node_cleanup.only_log_warning = true
  cluster_partition_handling = {{ .Values.clustering.partitionHandling }}
  {{- end }}
  {{- if .Values.loadDefinition.enabled }}
  load_definitions = {{ .Values.loadDefinition.file }}
  {{- end }}
  # queue master locator
  queue_master_locator = min-masters
  # enable guest user
  loopback_users.guest = false
  {{ tpl .Values.extraConfiguration . }}
  {{- if .Values.auth.tls.enabled }}
  ssl_options.verify = {{ .Values.auth.tls.sslOptionsVerify }}
  listeners.ssl.default = {{ .Values.service.ports.amqpTls }}
  ssl_options.fail_if_no_peer_cert = {{ .Values.auth.tls.failIfNoPeerCert }}
  ssl_options.cacertfile = /opt/rabbitmq/certs/ca_certificate.pem
  ssl_options.certfile = /opt/rabbitmq/certs/server_certificate.pem
  ssl_options.keyfile = /opt/rabbitmq/certs/server_key.pem
  {{- end }}
  {{- if .Values.ldap.enabled }}
  auth_backends.1.authn = ldap
  auth_backends.1.authz = {{ ternary "ldap" "internal" .Values.ldap.authorisationEnabled }}
  auth_backends.2 = internal
  {{- $host :=  list }}
  {{- $port :=  ternary 636 389 .Values.ldap.tls.enabled }}
  {{- if .Values.ldap.uri }}
  {{- $hostPort := get (urlParse .Values.ldap.uri) "host" }}
  {{- $host = list (index (splitList ":" $hostPort) 0) -}}
  {{- if (contains ":" $hostPort) }}
  {{- $port = index (splitList ":" $hostPort) 1 -}}
  {{- end }}
  {{- end }}
  {{- range $index, $server := concat $host .Values.ldap.servers }}
  auth_ldap.servers.{{ add $index 1 }} = {{ $server }}
  {{- end }}
  auth_ldap.port = {{ coalesce .Values.ldap.port $port }}
  {{- if or .Values.ldap.user_dn_pattern .Values.ldap.userDnPattern }}
  auth_ldap.user_dn_pattern = {{ coalesce .Values.ldap.user_dn_pattern .Values.ldap.userDnPattern }}
  {{- end }}
  {{- if .Values.ldap.basedn }}
  auth_ldap.dn_lookup_base = {{ .Values.ldap.basedn }}
  {{- end }}
  {{- if .Values.ldap.uidField }}
  auth_ldap.dn_lookup_attribute = {{ .Values.ldap.uidField }}
  {{- end }}
  {{- if .Values.ldap.binddn }}
  auth_ldap.dn_lookup_bind.user_dn = {{ .Values.ldap.binddn }}
  auth_ldap.dn_lookup_bind.password = {{ required "'ldap.bindpw' is required when 'ldap.binddn' is defined" .Values.ldap.bindpw }}
  {{- end }}
  {{- if .Values.ldap.tls.enabled }}
  auth_ldap.use_ssl = {{ not .Values.ldap.tls.startTls }}
  auth_ldap.use_starttls = {{ .Values.ldap.tls.startTls }}
  {{- if .Values.ldap.tls.CAFilename }}
  auth_ldap.ssl_options.cacertfile = {{ .Values.ldap.tls.certificatesMountPath }}/{{ .Values.ldap.tls.CAFilename }}
  {{- end }}
  {{- if .Values.ldap.tls.certFilename }}
  auth_ldap.ssl_options.certfile = {{ .Values.ldap.tls.certificatesMountPath }}/{{ .Values.ldap.tls.certFilename }}
  auth_ldap.ssl_options.keyfile = {{ .Values.ldap.tls.certificatesMountPath }}/{{ required "'ldap.tls.certKeyFilename' is required when 'ldap.tls.certFilename' is defined" .Values.ldap.tls.certKeyFilename }}
  {{- end }}
  {{- if .Values.ldap.tls.skipVerify }}
  auth_ldap.ssl_options.verify = verify_none
  auth_ldap.ssl_options.fail_if_no_peer_cert = false
  {{- else if .Values.ldap.tls.verify }}
  auth_ldap.ssl_options.verify = {{ .Values.ldap.tls.verify }}
  {{- end }}
  {{- end }}
  {{- end }}
  {{- if .Values.metrics.enabled }}
  ## Prometheus metrics
  ##
  prometheus.tcp.port = 9419
  {{- end }}
  {{- if .Values.memoryHighWatermark.enabled }}
  ## Memory Threshold
  ##
  total_memory_available_override_value = {{ include "rabbitmq.toBytes" .Values.resources.limits.memory }}
  vm_memory_high_watermark.{{ .Values.memoryHighWatermark.type }} = {{ .Values.memoryHighWatermark.value }}
  {{- end }}

extraConfiguration: |-
  #default_vhost = {{ .Release.Namespace }}-vhost
  #disk_free_limit.absolute = 50MB

advancedConfiguration: |-
ldap:
  enabled: false
  uri: ""
  servers: []
  port: ""

  userDnPattern: ""
  binddn: ""
  bindpw: ""
  basedn: ""
  uidField: ""
  authorisationEnabled: false
  tls:
    enabled: false
    startTls: false
    skipVerify: false
    verify: "verify_peer"
    certificatesMountPath: /opt/rabbitmq/ldap/certs
    certificatesSecret: ""
    CAFilename: ""
    certFilename: ""
    certKeyFilename: ""

extraVolumeMounts: []
extraVolumes: []
extraSecrets: {}
extraSecretsPrependReleaseName: false
replicaCount: 1
schedulerName: ""
podManagementPolicy: OrderedReady
podLabels: {}
podAnnotations: {}
updateStrategy:
  type: RollingUpdate
statefulsetLabels: {}
priorityClassName: ""
podAffinityPreset: ""
podAntiAffinityPreset: soft

nodeAffinityPreset:
  type: ""
  key: ""
  values: []

affinity: {}
nodeSelector: {}
tolerations: []
topologySpreadConstraints: []

podSecurityContext:
  enabled: true
  fsGroup: 1001

containerSecurityContext:
  enabled: true
  runAsUser: 1001
  runAsNonRoot: true

resources:
  limits: {}
  requests: {}

livenessProbe:
  enabled: true
  initialDelaySeconds: 120
  timeoutSeconds: 20
  periodSeconds: 30
  failureThreshold: 6
  successThreshold: 1
readinessProbe:
  enabled: true
  initialDelaySeconds: 10
  timeoutSeconds: 20
  periodSeconds: 30
  failureThreshold: 3
  successThreshold: 1

startupProbe:
  enabled: false
  initialDelaySeconds: 10
  timeoutSeconds: 20
  periodSeconds: 30
  failureThreshold: 3
  successThreshold: 1

customLivenessProbe: {}
customReadinessProbe: {}
customStartupProbe: {}
initContainers: []
sidecars: []

pdb:
  create: false
  minAvailable: 1
  maxUnavailable: ""

serviceAccount:
  create: true
  name: ""
  automountServiceAccountToken: true
  annotations: {}

rbac:
  create: true
persistence:
  enabled: true
  storageClass: ""
  selector: {}
  accessModes:
    - ReadWriteOnce
  existingClaim: ""
  mountPath: /rabbitmq/mnesia
  subPath: ""
  size: 8Gi
  annotations: {}

service:
  type: ClusterIP
  portEnabled: true
  distPortEnabled: true
  managerPortEnabled: true
  epmdPortEnabled: true
  ports:
    amqp: 5672
    amqpTls: 5671
    dist: 25672
    manager: 15672
    metrics: 9419
    epmd: 4369

  portNames:
    amqp: "amqp"
    amqpTls: "amqp-ssl"
    dist: "dist"
    manager: "http-stats"
    metrics: "metrics"
    epmd: "epmd"

  nodePorts:
    amqp: ""
    amqpTls: ""
    dist: ""
    manager: ""
    epmd: ""
    metrics: ""
  extraPorts: []
  loadBalancerSourceRanges: []
  externalIPs: []
  externalTrafficPolicy: Cluster
  loadBalancerIP: ""
  clusterIP: ""
  labels: {}
  annotations: {}
  annotationsHeadless: {}
  sessionAffinity: None
  sessionAffinityConfig: {}

ingress:
  enabled: false
  path: /
  pathType: ImplementationSpecific
  hostname: rabbitmq.local
  annotations: {}
  tls: false
  selfSigned: false
  extraHosts: []
  extraPaths: []
  extraRules: []
  extraTls: []

  secrets: []
  ingressClassName: ""

networkPolicy:
  enabled: false
  allowExternal: true
  additionalRules: []

metrics:
  enabled: false
  plugins: "rabbitmq_prometheus"
  podAnnotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "{{ .Values.service.ports.metrics }}"
  serviceMonitor:
    enabled: false
    namespace: ""
    interval: 30s
    scrapeTimeout: ""
    jobLabel: ""
    relabelings: []
    metricRelabelings: []
    honorLabels: false
    targetLabels: {}
    podTargetLabels: {}
    path: ""
    selector: {}
    labels: {}
    annotations: {}

  prometheusRule:
    enabled: false
    additionalLabels: {}
    namespace: ""

    rules: []

volumePermissions:
  enabled: false
  image:
    registry: eu.gcr.io
    repository: uc-next/rabbitmq
    tag: shel
    pullPolicy: IfNotPresent
    pullSecrets: []
  resources:
    limits: {}
    requests: {}
