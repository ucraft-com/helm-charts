replicaCount: 1

strategy: {}

nameOverride: ""
fullnameOverride: ""
imagePullSecrets: []
env: {}
# Configure Laravel PHP-FPM container.
app:
  image:
    repository: quay.io/renokico/laravel-helm-demo
    pullPolicy: IfNotPresent
    tag: "0.6.0"

  # Specify the Secret name to pull the .env file from.
  # If not specified, it defaults to "{release name}-env". It should
  # be a secret that contains an ".env" data key with the full
  # .env file that will be copied during pod creation.
  # The secret should be created by you before running the app.
  # envSecretName: ""

  resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

  # Extra environment variables for the app container.
  extraEnv: []
  # - name: POD_NAME
  #   valueFrom:
  #     fieldRef:
  #       fieldPath: metadata.name

  # Extra volumes to mount on the container.
  extraVolumeMounts: []
  # - name: some-folder
  #   mountPath: /some/path

  # Configure the TCP healthcheck for the PHP-FPM process.
  # If enabled, Kubernetes will periodically check the PHP-FPM
  # process to be alive and to serve FCGI requests.
  healthcheck:
    enabled: true
    period: 5

  # For PHP-FPM, php-fpm_exporter is used. Enabling it will
  # attach automatically the container and will expose metrics on localhost:9253/metrics
  # for Prometheus to scrape.
  # Read more: https://github.com/hipages/php-fpm_exporter
  exporter:
    enabled: false

    image:
      repository: hipages/php-fpm_exporter
      pullPolicy: IfNotPresent
      tag: "2.0.1"

    resources: {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 40m
    #   memory: 32Mi
    # requests:
    #   cpu: 40m
    #   memory: 32Mi

# Configure the in-pod NGINX container. This container will
# decode the fastcgi process from the PHP-FPM container
# and will reverse proxy it to the external service.
nginx:
  image:
    repository: nginx
    pullPolicy: IfNotPresent
    tag: "1.19"

  resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

  # Extra volumes to mount on the container.
  extraVolumeMounts: []
  # - name: some-folder
  #   mountPath: /some/path

  # Configure the HTTP healthcheck for the Laravel app.
  # If enabled, ensure the given path in the Laravel app
  # returns a 200 OK when accessed. Implementing a healthcheck
  # controller like https://github.com/renoki-co/laravel-healthchecks is desirable.
  healthcheck:
    enabled: false
    period: 5
    path: /health

  # Specify the Config name to pull the nginx configuration from.
  # If not specified, it defaults to "{release name}-nginx-config".
  # This will be automatically be created for you.
  # configName: ""

  # If no configName is specified, this will be the config
  # applied to the NGINX in-pod container.
  config: |
    events {
    }

    http {
      server {
        listen 8080 default_server;
        listen [::]:8080 default_server;

        server_name stub_status;

        location = /stub_status {
          stub_status;
        }
      }

      server {
        listen 80 default_server;
        listen [::]:80 default_server;

        root /var/www/html/public;
        server_name _;

        add_header X-Frame-Options "SAMEORIGIN";
        add_header X-XSS-Protection "1; mode=block";
        add_header X-Content-Type-Options "nosniff";

        index index.php;

        charset utf-8;

        location / {
          try_files $uri $uri/ /index.php?$query_string;
        }

        location = /favicon.ico { access_log off; log_not_found off; }
        location = /robots.txt  { access_log off; log_not_found off; }

        error_page 404 /index.php;

        location ~ \.php$ {
          include fastcgi_params;
          fastcgi_param REQUEST_METHOD $request_method;
          fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
          fastcgi_pass 127.0.0.1:9000;
        }

        location ~ /\.(?!well-known).* {
          deny all;
        }
      }
    }

  # For NGINX, nginx-prometheus-exporter is used. Enabling it will
  # attach automatically the container and will expose metrics on localhost:9113/metrics
  # for Prometheus to scrape.
  # Read more: https://github.com/nginxinc/nginx-prometheus-exporter
  exporter:
    enabled: false

    image:
      repository: nginx/nginx-prometheus-exporter
      pullPolicy: IfNotPresent
      tag: "0.9.0"

    resources: {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 40m
    #   memory: 32Mi
    # requests:
    #   cpu: 40m
    #   memory: 32Mi
persistence:
  ## If true, use a Persistent Volume Claim, If false, use emptyDir
  ##
  create: false
  ## Persistent Volume Storage Class
  ## If defined, storageClassName: <storageClass>
  ## If set to "-", storageClassName: "", which disables dynamic provisioning
  ## If undefined (the default) or set to null, no storageClassName spec is
  ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
  ##   GKE, AWS & OpenStack)
  ##
  # storageClass: "-"
  ## Persistent Volume Claim annotations
  ##
  annotations:
  ## Persistent Volume Access Mode
  ##
  accessModes:
    - ReadWriteMany
  ## Persistent Volume size
  ##
  size: 60T

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

rbac:
  create: false
  rules: []
  #  - apiGroups:
  #      - ""
  #    resources:
  #      - pods
  #    verbs:
  #      - get
  #      - list

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 80

  annotations: {}
  # Set annotations for the service.

ingress:
  enabled: true
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  # class: "nginx"
  hosts:
    - host: test.example.com
      paths:
        - /
  tls: []
  # - secretName: chart-example-tls
  #   hosts:
  #     - chart-example.local

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 10
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

  behavior: {}
  # Set the behavior for the autoscaler.
  # https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/#support-for-configurable-scaling-behavior

  # Custom Metrics will be appended to the default CPU/Memory resources (if they're enabled).
  customMetrics: []
  # - type: Pods
  #   pods:
  #     metric:
  #       name: phpfpm_process_utilization
  #     target:
  #       type: AverageValue
  #       averageValue: "50"

pdb:
  enabled: false
  minAvailable: 1
  # maxUnavailable: 25%

nodeSelector: {}

tolerations: []

affinity: {}

# Extra volumes to attach to the deployment.
extraVolumes: []
# - name: some-folder
#   emptyDir: {}

# Extra containers to run in the deployment.
extraContainers: []

# Extra init containers to run in the deployment.
extraInitContainers: []

# Configure the Task Scheduler.
scheduler:
  # When enabling it, the chart will deploy a sidecar container in the same pod that
  # will run the "schedule:run" command each minute.
  enabled: false

  command:
    - php
    - artisan
    - schedule:work

  resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

  # Configure the PHP healthcheck for the process.
  # If enabled, Kubernetes will periodically check the container
  # to see if it's still responsive.
  healthcheck:
    enabled: true
    period: 5

phpFpmConf:
  # Specify the Config name to pull the laravel.conf configuration from.
  # If not specified, it defaults to "{release name}-php-fpm-config".
  # This will be automatically be created for you if you do not specify it.
  # configName: ""

  content: |
    ; Choose how the process manager will control the number of child processes.
    ; Possible Values:
    ;   static  - a fixed number (pm.max_children) of child processes;
    ;   dynamic - the number of child processes are set dynamically based on the
    ;             following directives. With this process management, there will be
    ;             always at least 1 children.
    ;             pm.max_children      - the maximum number of children that can
    ;                                    be alive at the same time.
    ;             pm.start_servers     - the number of children created on startup.
    ;             pm.min_spare_servers - the minimum number of children in 'idle'
    ;                                    state (waiting to process). If the number
    ;                                    of 'idle' processes is less than this
    ;                                    number then some children will be created.
    ;             pm.max_spare_servers - the maximum number of children in 'idle'
    ;                                    state (waiting to process). If the number
    ;                                    of 'idle' processes is greater than this
    ;                                    number then some children will be killed.
    ;  ondemand - no children are created at startup. Children will be forked when
    ;             new requests will connect. The following parameter are used:
    ;             pm.max_children           - the maximum number of children that
    ;                                         can be alive at the same time.
    ;             pm.process_idle_timeout   - The number of seconds after which
    ;                                         an idle process will be killed.
    ; Note: This value is mandatory.
    pm = static

    ; The number of child processes to be created when pm is set to 'static' and the
    ; maximum number of child processes when pm is set to 'dynamic' or 'ondemand'.
    ; This value sets the limit on the number of simultaneous requests that will be
    ; served. Equivalent to the ApacheMaxClients directive with mpm_prefork.
    ; Equivalent to the PHP_FCGI_CHILDREN environment variable in the original PHP
    ; CGI. The below defaults are based on a server without much resources. Don't
    ; forget to tweak pm.* to fit your needs.
    ; Note: Used when pm is set to 'static', 'dynamic' or 'ondemand'
    ; Note: This value is mandatory.
    pm.max_children = 5

    ; The number of child processes created on startup.
    ; Note: Used only when pm is set to 'dynamic'
    ; Default Value: (min_spare_servers + max_spare_servers) / 2
    ;pm.start_servers = 2

    ; The desired minimum number of idle server processes.
    ; Note: Used only when pm is set to 'dynamic'
    ; Note: Mandatory when pm is set to 'dynamic'
    ;pm.min_spare_servers = 1

    ; The desired maximum number of idle server processes.
    ; Note: Used only when pm is set to 'dynamic'
    ; Note: Mandatory when pm is set to 'dynamic'
    ;pm.max_spare_servers = 3

    ; The number of seconds after which an idle process will be killed.
    ; Note: Used only when pm is set to 'ondemand'
    ; Default Value: 10s
    ;pm.process_idle_timeout = 10s;

    ; The number of requests each child process should execute before respawning.
    ; This can be useful to work around memory leaks in 3rd party libraries. For
    ; endless request processing specify '0'. Equivalent to PHP_FCGI_MAX_REQUESTS.
    ; Default Value: 0
    pm.max_requests = 100

    ; The URI to view the FPM status page. If this value is not set, no URI will be
    ; recognized as a status page. It shows the following information:
    ;   pool                 - the name of the pool;
    ;   process manager      - static, dynamic or ondemand;
    ;   start time           - the date and time FPM has started;
    ;   start since          - number of seconds since FPM has started;
    ;   accepted conn        - the number of request accepted by the pool;
    ;   listen queue         - the number of request in the queue of pending
    ;                          connections (see backlog in listen(2));
    ;   max listen queue     - the maximum number of requests in the queue
    ;                          of pending connections since FPM has started;
    ;   listen queue len     - the size of the socket queue of pending connections;
    ;   idle processes       - the number of idle processes;
    ;   active processes     - the number of active processes;
    ;   total processes      - the number of idle + active processes;
    ;   max active processes - the maximum number of active processes since FPM
    ;                          has started;
    ;   max children reached - number of times, the process limit has been reached,
    ;                          when pm tries to start more children (works only for
    ;                          pm 'dynamic' and 'ondemand');
    ; Value are updated in real time.
    ; Example output:
    ;   pool:                 www
    ;   process manager:      static
    ;   start time:           01/Jul/2011:17:53:49 +0200
    ;   start since:          62636
    ;   accepted conn:        190460
    ;   listen queue:         0
    ;   max listen queue:     1
    ;   listen queue len:     42
    ;   idle processes:       4
    ;   active processes:     11
    ;   total processes:      15
    ;   max active processes: 12
    ;   max children reached: 0
    ;
    ; By default the status page output is formatted as text/plain. Passing either
    ; 'html', 'xml' or 'json' in the query string will return the corresponding
    ; output syntax. Example:
    ;   http://www.foo.bar/status
    ;   http://www.foo.bar/status?json
    ;   http://www.foo.bar/status?html
    ;   http://www.foo.bar/status?xml
    ;
    ; By default the status page only outputs short status. Passing 'full' in the
    ; query string will also return status for each pool process.
    ; Example:
    ;   http://www.foo.bar/status?full
    ;   http://www.foo.bar/status?json&full
    ;   http://www.foo.bar/status?html&full
    ;   http://www.foo.bar/status?xml&full
    ; The Full status returns for each process:
    ;   pid                  - the PID of the process;
    ;   state                - the state of the process (Idle, Running, ...);
    ;   start time           - the date and time the process has started;
    ;   start since          - the number of seconds since the process has started;
    ;   requests             - the number of requests the process has served;
    ;   request duration     - the duration in µs of the requests;
    ;   request method       - the request method (GET, POST, ...);
    ;   request URI          - the request URI with the query string;
    ;   content length       - the content length of the request (only with POST);
    ;   user                 - the user (PHP_AUTH_USER) (or '-' if not set);
    ;   script               - the main script called (or '-' if not set);
    ;   last request cpu     - the %cpu the last request consumed
    ;                          it's always 0 if the process is not in Idle state
    ;                          because CPU calculation is done when the request
    ;                          processing has terminated;
    ;   last request memory  - the max amount of memory the last request consumed
    ;                          it's always 0 if the process is not in Idle state
    ;                          because memory calculation is done when the request
    ;                          processing has terminated;
    ; If the process is in Idle state, then informations are related to the
    ; last request the process has served. Otherwise informations are related to
    ; the current request being served.
    ; Example output:
    ;   ************************
    ;   pid:                  31330
    ;   state:                Running
    ;   start time:           01/Jul/2011:17:53:49 +0200
    ;   start since:          63087
    ;   requests:             12808
    ;   request duration:     1250261
    ;   request method:       GET
    ;   request URI:          /test_mem.php?N=10000
    ;   content length:       0
    ;   user:                 -
    ;   script:               /home/fat/web/docs/php/test_mem.php
    ;   last request cpu:     0.00
    ;   last request memory:  0
    ;
    ; Note: There is a real-time FPM status monitoring sample web page available
    ;       It's available in: /usr/local/share/php/fpm/status.html
    ;
    ; Note: The value must start with a leading slash (/). The value can be
    ;       anything, but it may not be a good idea to use the .php extension or it
    ;       may conflict with a real PHP file.
    ; Default Value: not set
    pm.status_path = /status

    ; The address on which to accept FastCGI status request. This creates a new
    ; invisible pool that can handle requests independently. This is useful
    ; if the main pool is busy with long running requests because it is still possible
    ; to get the status before finishing the long running requests.
    ;
    ; Valid syntaxes are:
    ;   'ip.add.re.ss:port'    - to listen on a TCP socket to a specific IPv4 address on
    ;                            a specific port;
    ;   '[ip:6:addr:ess]:port' - to listen on a TCP socket to a specific IPv6 address on
    ;                            a specific port;
    ;   'port'                 - to listen on a TCP socket to all addresses
    ;                            (IPv6 and IPv4-mapped) on a specific port;
    ;   '/path/to/unix/socket' - to listen on a unix socket.
    ; Default Value: value of the listen option
    pm.status_listen = 127.0.0.1:9001

# Configure the php.ini used for the PHP process.
# This will overwrite the default ones that exists in the container.
phpIni:
  # Specify the Config name to pull the php.ini configuration from.
  # If not specified, it defaults to "{release name}-php-ini-config".
  # This will be automatically be created for you if you do not specify it.
  # configName: ""

  # If no configName is specified, this will be the config
  # applied to the app container.
  content: |
    ; Determines if Zend OPCache is enabled
    opcache.enable=1

    ; Determines if Zend OPCache is enabled for the CLI version of PHP
    opcache.enable_cli=1

    ; The OPcache shared memory storage size.
    opcache.memory_consumption=128

    ; The amount of memory for interned strings in Mbytes.
    opcache.interned_strings_buffer=128

    ; The maximum number of keys (scripts) in the OPcache hash table.
    ; Only numbers between 200 and 1000000 are allowed.
    opcache.max_accelerated_files=1000000

    ; maximum memory allocated to store the results
    realpath_cache_size=8192K

    ; save the results for 10 minutes (600 seconds)
    realpath_cache_ttl=600

    ; The maximum percentage of "wasted" memory until a restart is scheduled.
    opcache.max_wasted_percentage=5

    ; When this directive is enabled, the OPcache appends the current working
    ; directory to the script key, thus eliminating possible collisions between
    ; files with the same name (basename). Disabling the directive improves
    ; performance, but may break existing applications.
    ;opcache.use_cwd=1

    ; When disabled, you must reset the OPcache manually or restart the
    ; webserver for changes to the filesystem to take effect.
    opcache.validate_timestamps=0

    ; How often (in seconds) to check file timestamps for changes to the shared
    ; memory storage allocation. ("1" means validate once per second, but only
    ; once per request. "0" means always validate)
    opcache.revalidate_freq=0

    ; Enables or disables file search in include_path optimization
    ;opcache.revalidate_path=0

    ; If disabled, all PHPDoc comments are dropped from the code to reduce the
    ; size of the optimized code.
    ;opcache.save_comments=1

    ; If enabled, a fast shutdown sequence is used for the accelerated code
    ; Depending on the used Memory Manager this may cause some incompatibilities.
    opcache.fast_shutdown=1

    ; Allow file existence override (file_exists, etc.) performance feature.
    ;opcache.enable_file_override=0

    ; A bitmask, where each bit enables or disables the appropriate OPcache
    ; passes
    ;opcache.optimization_level=0xffffffff

    ;opcache.inherited_hack=1
    ;opcache.dups_fix=0

    ; The location of the OPcache blacklist file (wildcards allowed).
    ; Each OPcache blacklist file is a text file that holds the names of files
    ; that should not be accelerated.
    opcache.blacklist_filename=/etc/php-*/opcache*.blacklist

    ; Allows exclusion of large files from being cached. By default all files
    ; are cached.
    ;opcache.max_file_size=0

    ; Check the cache checksum each N requests.
    ; The default value of "0" means that the checks are disabled.
    ;opcache.consistency_checks=0

    ; How long to wait (in seconds) for a scheduled restart to begin if the cache
    ; is not being accessed.
    ;opcache.force_restart_timeout=180

    ; OPcache error_log file name. Empty string assumes "stderr".
    ;opcache.error_log=

    ; All OPcache errors go to the Web server log.
    ; By default, only fatal errors (level 0) or errors (level 1) are logged.
    ; You can also enable warnings (level 2), info messages (level 3) or
    ; debug messages (level 4).
    ;opcache.log_verbosity_level=1

    ; Preferred Shared Memory back-end. Leave empty and let the system decide.
    ;opcache.preferred_memory_model=

    ; Protect the shared memory from unexpected writing during script execution.
    ; Useful for internal debugging only.
    ;opcache.protect_memory=0

    ; Allows calling OPcache API functions only from PHP scripts which path is
    ; started from specified string. The default "" means no restriction
    ;opcache.restrict_api=

    ; Enables and sets the second level cache directory.
    ; It should improve performance when SHM memory is full, at server restart or
    ; SHM reset. The default "" disables file based caching.
    ; RPM note : file cache directory must be owned by process owner
    ;   for mod_php, see /etc/httpd/conf.d/php.conf
    ;   for php-fpm, see /etc/php-fpm.d/*conf
    ;opcache.file_cache=

    ; Enables or disables opcode caching in shared memory.
    ;opcache.file_cache_only=0

    ; Enables or disables checksum validation when script loaded from file cache.
    ;opcache.file_cache_consistency_checks=1

    ; Implies opcache.file_cache_only=1 for a certain process that failed to
    ; reattach to the shared memory (for Windows only). Explicitly enabled file
    ; cache is required.
    ;opcache.file_cache_fallback=1

    ; Validate cached file permissions.
    ; Leads OPcache to check file readability on each access to cached file.
    ; This directive should be enabled in shared hosting environment, when few
    ; users (PHP-FPM pools) reuse the common OPcache shared memory.
    ;opcache.validate_permission=0

    ; Prevent name collisions in chroot'ed environment.
    ; This directive prevents file name collisions in different "chroot"
    ; environments. It should be enabled for sites that may serve requests in
    ; different "chroot" environments.
    ;opcache.validate_root=0

    ; Enables or disables copying of PHP code (text segment) into HUGE PAGES.
    ; This should improve performance, but requires appropriate OS configuration.
    opcache.huge_code_pages=1

    ; Maximum amount of memory a script may consume
    ; http://php.net/memory-limit
    memory_limit = 128M

    ; Maximum execution time of each script, in seconds
    ; http://php.net/max-execution-time
    ; Note: This directive is hardcoded to 0 for the CLI SAPI
    max_execution_time = 30

    ;;;;;;;;;;;;;;;;
    ; File Uploads ;
    ;;;;;;;;;;;;;;;;

    ; Whether to allow HTTP file uploads.
    ; http://php.net/file-uploads
    file_uploads = On

    ; Temporary directory for HTTP uploaded files (will use system default if not
    ; specified).
    ; http://php.net/upload-tmp-dir
    ;upload_tmp_dir =

    ; Maximum allowed size for uploaded files.
    ; http://php.net/upload-max-filesize
    upload_max_filesize = 2M

    ; Maximum number of files that can be uploaded via a single request
    max_file_uploads = 20

    ;;;;;;;;;;;;;;;;;;
    ; Fopen wrappers ;
    ;;;;;;;;;;;;;;;;;;

    ; Whether to allow the treatment of URLs (like http:// or ftp://) as files.
    ; http://php.net/allow-url-fopen
    allow_url_fopen = On

    ; Whether to allow include/require to open URLs (like http:// or ftp://) as files.
    ; http://php.net/allow-url-include
    allow_url_include = Off

    [Session]
    ; Handler used to store/retrieve data.
    ; http://php.net/session.save-handler
    session.save_handler = files

    ; Argument passed to save_handler.  In the case of files, this is the path
    ; where data files are stored. Note: Windows users have to change this
    ; variable in order to use PHP's session functions.
    ;
    ; The path can be defined as:
    ;
    ;     session.save_path = "N;/path"
    ;
    ; where N is an integer.  Instead of storing all the session files in
    ; /path, what this will do is use subdirectories N-levels deep, and
    ; store the session data in those directories.  This is useful if
    ; your OS has problems with many files in one directory, and is
    ; a more efficient layout for servers that handle many sessions.
    ;
    ; NOTE 1: PHP will not create this directory structure automatically.
    ;         You can use the script in the ext/session dir for that purpose.
    ; NOTE 2: See the section on garbage collection below if you choose to
    ;         use subdirectories for session storage
    ;
    ; The file storage module creates files using mode 600 by default.
    ; You can change that by using
    ;
    ;     session.save_path = "N;MODE;/path"
    ;
    ; where MODE is the octal representation of the mode. Note that this
    ; does not overwrite the process's umask.
    ; http://php.net/session.save-path
    ;session.save_path = "/tmp"

    ; Whether to use strict session mode.
    ; Strict session mode does not accept an uninitialized session ID, and
    ; regenerates the session ID if the browser sends an uninitialized session ID.
    ; Strict mode protects applications from session fixation via a session adoption
    ; vulnerability. It is disabled by default for maximum compatibility, but
    ; enabling it is encouraged.
    ; https://wiki.php.net/rfc/strict_sessions
    session.use_strict_mode = 0

    ; Whether to use cookies.
    ; http://php.net/session.use-cookies
    session.use_cookies = 1

    ; http://php.net/session.cookie-secure
    ;session.cookie_secure =

    ; This option forces PHP to fetch and use a cookie for storing and maintaining
    ; the session id. We encourage this operation as it's very helpful in combating
    ; session hijacking when not specifying and managing your own session id. It is
    ; not the be-all and end-all of session hijacking defense, but it's a good start.
    ; http://php.net/session.use-only-cookies
    session.use_only_cookies = 1

    ; Name of the session (used as cookie name).
    ; http://php.net/session.name
    session.name = PHPSESSID

    ; Initialize session on request startup.
    ; http://php.net/session.auto-start
    session.auto_start = 0

    ; Lifetime in seconds of cookie or, if 0, until browser is restarted.
    ; http://php.net/session.cookie-lifetime
    session.cookie_lifetime = 0

    ; The path for which the cookie is valid.
    ; http://php.net/session.cookie-path
    session.cookie_path = /

    ; The domain for which the cookie is valid.
    ; http://php.net/session.cookie-domain
    session.cookie_domain =

    ; Whether or not to add the httpOnly flag to the cookie, which makes it
    ; inaccessible to browser scripting languages such as JavaScript.
    ; http://php.net/session.cookie-httponly
    session.cookie_httponly =

    ; Add SameSite attribute to cookie to help mitigate Cross-Site Request Forgery (CSRF/XSRF)
    ; Current valid values are "Strict", "Lax" or "None". When using "None",
    ; make sure to include the quotes, as `none` is interpreted like `false` in ini files.
    ; https://tools.ietf.org/html/draft-west-first-party-cookies-07
    session.cookie_samesite =

    ; Handler used to serialize data. php is the standard serializer of PHP.
    ; http://php.net/session.serialize-handler
    session.serialize_handler = php

    ; Defines the probability that the 'garbage collection' process is started on every
    ; session initialization. The probability is calculated by using gc_probability/gc_divisor,
    ; e.g. 1/100 means there is a 1% chance that the GC process starts on each request.
    ; Default Value: 1
    ; Development Value: 1
    ; Production Value: 1
    ; http://php.net/session.gc-probability
    session.gc_probability = 1

    ; Defines the probability that the 'garbage collection' process is started on every
    ; session initialization. The probability is calculated by using gc_probability/gc_divisor,
    ; e.g. 1/100 means there is a 1% chance that the GC process starts on each request.
    ; For high volume production servers, using a value of 1000 is a more efficient approach.
    ; Default Value: 100
    ; Development Value: 1000
    ; Production Value: 1000
    ; http://php.net/session.gc-divisor
    session.gc_divisor = 1000

    ; After this number of seconds, stored data will be seen as 'garbage' and
    ; cleaned up by the garbage collection process.
    ; http://php.net/session.gc-maxlifetime
    session.gc_maxlifetime = 1440

    ; NOTE: If you are using the subdirectory option for storing session files
    ;       (see session.save_path above), then garbage collection does *not*
    ;       happen automatically.  You will need to do your own garbage
    ;       collection through a shell script, cron entry, or some other method.
    ;       For example, the following script is the equivalent of setting
    ;       session.gc_maxlifetime to 1440 (1440 seconds = 24 minutes):
    ;          find /path/to/sessions -cmin +24 -type f | xargs rm

    ; Check HTTP Referer to invalidate externally stored URLs containing ids.
    ; HTTP_REFERER has to contain this substring for the session to be
    ; considered as valid.
    ; http://php.net/session.referer-check
    session.referer_check =

    ; Set to {nocache,private,public,} to determine HTTP caching aspects
    ; or leave this empty to avoid sending anti-caching headers.
    ; http://php.net/session.cache-limiter
    session.cache_limiter = nocache

    ; Document expires after n minutes.
    ; http://php.net/session.cache-expire
    session.cache_expire = 180

    ; trans sid support is disabled by default.
    ; Use of trans sid may risk your users' security.
    ; Use this option with caution.
    ; - User may send URL contains active session ID
    ;   to other person via. email/irc/etc.
    ; - URL that contains active session ID may be stored
    ;   in publicly accessible computer.
    ; - User may access your site with the same session ID
    ;   always using URL stored in browser's history or bookmarks.
    ; http://php.net/session.use-trans-sid
    session.use_trans_sid = 0

    ; Set session ID character length. This value could be between 22 to 256.
    ; Shorter length than default is supported only for compatibility reason.
    ; Users should use 32 or more chars.
    ; http://php.net/session.sid-length
    ; Default Value: 32
    ; Development Value: 26
    ; Production Value: 26
    session.sid_length = 26

    ; The URL rewriter will look for URLs in a defined set of HTML tags.
    ; <form> is special; if you include them here, the rewriter will
    ; add a hidden <input> field with the info which is otherwise appended
    ; to URLs. <form> tag's action attribute URL will not be modified
    ; unless it is specified.
    ; Note that all valid entries require a "=", even if no value follows.
    ; Default Value: "a=href,area=href,frame=src,form="
    ; Development Value: "a=href,area=href,frame=src,form="
    ; Production Value: "a=href,area=href,frame=src,form="
    ; http://php.net/url-rewriter.tags
    session.trans_sid_tags = "a=href,area=href,frame=src,form="

    ; URL rewriter does not rewrite absolute URLs by default.
    ; To enable rewrites for absolute paths, target hosts must be specified
    ; at RUNTIME. i.e. use ini_set()
    ; <form> tags is special. PHP will check action attribute's URL regardless
    ; of session.trans_sid_tags setting.
    ; If no host is defined, HTTP_HOST will be used for allowed host.
    ; Example value: php.net,www.php.net,wiki.php.net
    ; Use "," for multiple hosts. No spaces are allowed.
    ; Default Value: ""
    ; Development Value: ""
    ; Production Value: ""
    ;session.trans_sid_hosts=""

    ; Define how many bits are stored in each character when converting
    ; the binary hash data to something readable.
    ; Possible values:
    ;   4  (4 bits: 0-9, a-f)
    ;   5  (5 bits: 0-9, a-v)
    ;   6  (6 bits: 0-9, a-z, A-Z, "-", ",")
    ; Default Value: 4
    ; Development Value: 5
    ; Production Value: 5
    ; http://php.net/session.hash-bits-per-character
    session.sid_bits_per_character = 5

    ; Enable upload progress tracking in $_SESSION
    ; Default Value: On
    ; Development Value: On
    ; Production Value: On
    ; http://php.net/session.upload-progress.enabled
    ;session.upload_progress.enabled = On

    ; Cleanup the progress information as soon as all POST data has been read
    ; (i.e. upload completed).
    ; Default Value: On
    ; Development Value: On
    ; Production Value: On
    ; http://php.net/session.upload-progress.cleanup
    ;session.upload_progress.cleanup = On

    ; A prefix used for the upload progress key in $_SESSION
    ; Default Value: "upload_progress_"
    ; Development Value: "upload_progress_"
    ; Production Value: "upload_progress_"
    ; http://php.net/session.upload-progress.prefix
    ;session.upload_progress.prefix = "upload_progress_"

    ; The index name (concatenated with the prefix) in $_SESSION
    ; containing the upload progress information
    ; Default Value: "PHP_SESSION_UPLOAD_PROGRESS"
    ; Development Value: "PHP_SESSION_UPLOAD_PROGRESS"
    ; Production Value: "PHP_SESSION_UPLOAD_PROGRESS"
    ; http://php.net/session.upload-progress.name
    ;session.upload_progress.name = "PHP_SESSION_UPLOAD_PROGRESS"

    ; How frequently the upload progress should be updated.
    ; Given either in percentages (per-file), or in bytes
    ; Default Value: "1%"
    ; Development Value: "1%"
    ; Production Value: "1%"
    ; http://php.net/session.upload-progress.freq
    ;session.upload_progress.freq =  "1%"

    ; The minimum delay between updates, in seconds
    ; Default Value: 1
    ; Development Value: 1
    ; Production Value: 1
    ; http://php.net/session.upload-progress.min-freq
    ;session.upload_progress.min_freq = "1"

    ; Only write session data when session data is changed. Enabled by default.
    ; http://php.net/session.lazy-write
    ;session.lazy_write = On
